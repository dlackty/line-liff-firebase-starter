window.onload = function () {
  fetch("/send_id")
    .then(function (reqResponse) {
      return reqResponse.json();
    })
    .then(function (jsonResponse) {
      let myLiffId = jsonResponse.id;
      initializeLiffOrDie(myLiffId);
    })
    .catch(function () {
      document.getElementById("liffAppContent").classList.add("hidden");
      document
        .getElementById("cfLiffIdErrorMessage")
        .classList.remove("hidden");
    });
};

/**
 * Check if myLiffId is null. If null do not initiate liff.
 * @param {string} myLiffId The LIFF ID of the selected element
 */
function initializeLiffOrDie(myLiffId) {
  if (!myLiffId) {
    document.getElementById("liffAppContent").classList.add("hidden");
    document.getElementById("liffIdErrorMessage").classList.remove("hidden");
  } else {
    initializeLiff(myLiffId);
  }
}

/**
 * Initialize LIFF
 * @param {string} myLiffId The LIFF ID of the selected element
 */
function initializeLiff(myLiffId) {
  liff
    .init({
      liffId: myLiffId,
    })
    .then(() => {
      // start to use LIFF's api
      initializeApp();
    })
    .catch((err) => {
      document.getElementById("liffAppContent").classList.add("hidden");
      document
        .getElementById("liffInitErrorMessage")
        .classList.remove("hidden");
    });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
  displayLiffData();
  displayIsInClientInfo();
  displayAccessToken();
  registerButtonHandlers();
  exchangeFirebaseCustomToken();

  // check if the user is logged in/out, and disable inappropriate button
  if (liff.isLoggedIn()) {
    document.getElementById("liffLoginButton").disabled = true;
  } else {
    document.getElementById("liffLogoutButton").disabled = true;
  }
}

/**
 * Display data generated by invoking LIFF methods
 */
function displayLiffData() {
  document.getElementById("browserLanguage").textContent = liff.getLanguage();
  document.getElementById("sdkVersion").textContent = liff.getVersion();
  document.getElementById("lineVersion").textContent = liff.getVersion();
  document.getElementById("isInClient").textContent = liff.isInClient();
  document.getElementById("isLoggedIn").textContent = liff.isLoggedIn();
  document.getElementById("deviceOS").textContent = liff.getOS();
}

/**
 * Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
 */
function displayIsInClientInfo() {
  if (liff.isInClient()) {
    document.getElementById("liffLoginButton").classList.toggle("hidden");
    document.getElementById("liffLogoutButton").classList.toggle("hidden");
    document.getElementById("isInClientMessage").textContent =
      "You are opening the app in the in-app browser of LINE.";
  } else {
    document.getElementById("isInClientMessage").textContent =
      "You are opening the app in an external browser.";
  }
}

/**
 * Display access token from LIFF
 */
function displayAccessToken() {
  const accessToken = liff.getAccessToken();
  document.getElementById("accessTokenField").textContent = accessToken;
  toggleElement("accessTokenData");
}

/**
 * Register event handlers for the buttons displayed in the app
 */
function registerButtonHandlers() {
  // login call, only when external browser is used
  document
    .getElementById("liffLoginButton")
    .addEventListener("click", function () {
      if (!liff.isLoggedIn()) {
        // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.
        liff.login();
      }
    });

  // logout call only when external browse
  document
    .getElementById("liffLogoutButton")
    .addEventListener("click", function () {
      if (liff.isLoggedIn()) {
        liff.logout();
        window.location.reload();
      }
    });
}

/**
 * Alert the user if LIFF is opened in an external browser and unavailable buttons are tapped
 */
function sendAlertIfNotInClient() {
  alert(
    "This button is unavailable as LIFF is currently being opened in an external browser."
  );
}

/**
 * Toggle specified element
 * @param {string} elementId The ID of the selected element
 */
function toggleElement(elementId) {
  const elem = document.getElementById(elementId);
  if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {
    elem.style.display = "none";
  } else {
    elem.style.display = "block";
  }
}

/**
 * Exchange LINE login info with Firebase
 */
function exchangeFirebaseCustomToken() {
  const access_token = liff.getAccessToken();
  fetch("/create_custom_token", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ access_token: access_token }),
  })
    .then((reqResponse) => reqResponse.json())
    .then((jsonResponse) => {
      firebase.auth().signInWithCustomToken(jsonResponse.firebase_token);
      document.getElementById("customTokenField").textContent =
        jsonResponse.firebase_token;
      toggleElement("customTokenData");

      // You can start adding Firebase code logic here
    });
}
